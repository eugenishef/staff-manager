{
	"info": {
		"_postman_id": "eeda37d0-2c68-403e-a4cc-013871205b65",
		"name": "staff-manager",
		"description": "Коллекция запросов для тестирования Employee API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Наполнение бд",
			"item": [
				{
					"name": "Наполнение базы данных",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John\",\n    \"role\": \"Software Engineer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Наполнение базы данных",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane\",\n    \"role\": \"Project Manager\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Наполнение базы данных",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Alice\",\n    \"role\": \"Designer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Наполнение базы данных",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Charlie\",\n    \"role\": \"QA Tester\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/employees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Создание сотрудника (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ содержит ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Имя и роль совпадают с отправленными данными\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Jonathan\");",
							"    pm.expect(jsonData.role).to.eql(\"Developer\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jonathan\",\n    \"role\": \"Developer\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание сотрудников (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"name\": \"Lulu\",\n        \"role\": \"Designer\"\n    },\n    {\n        \"name\": \"Mary\",\n        \"role\": \"Manager\"\n    }\n]\n"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/array",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						"array"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание сотрудника (негативный тест: пустое имя)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 400 Bad Request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Сообщение об ошибке содержит 'Имя сотрудника не может быть пустым'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.include(\"Имя сотрудника не может быть пустым\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"role\": \"Developer\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка первой страницы (позитивный тест: пагинация и сортировка по имени в порядке возрастания)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ разбит на страницы и состоит из 2 элементов\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.content.length).to.eql(2);",
							"    pm.expect(jsonData.pageable.pageNumber).to.eql(0);",
							"    pm.expect(jsonData.pageable.pageSize).to.eql(2);",
							"});",
							"",
							"pm.test(\"Данные сортируются по названию в порядке возрастания\", function () {",
							"    let jsonData = pm.response.json();",
							"    let names = jsonData.content.map(emp => emp.name);",
							"    let sortedNames = [...names].sort();",
							"    pm.expect(names).to.eql(sortedNames);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees?page=0&size=2&sortBy=name&sortDir=asc",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "sortBy",
							"value": "name"
						},
						{
							"key": "sortDir",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка второй страницы (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ разбит на страницы с правильным номером страницы\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.pageable.pageNumber).to.eql(1);",
							"    pm.expect(jsonData.pageable.pageSize).to.eql(2);",
							"    pm.expect(jsonData.content.length).to.be.at.most(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees?page=1&size=2&sortBy=name&sortDir=asc",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "sortBy",
							"value": "name"
						},
						{
							"key": "sortDir",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка сортировки по роли в порядке убывания (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Данные сортируются по ролям в порядке убывания\", function () {",
							"    let jsonData = pm.response.json();",
							"    let roles = jsonData.content.map(emp => emp.role);",
							"    let sortedRoles = [...roles].sort().reverse();",
							"    pm.expect(roles).to.eql(sortedRoles);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees?page=0&size=5&sortBy=role&sortDir=desc",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						},
						{
							"key": "sortBy",
							"value": "role"
						},
						{
							"key": "sortDir",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка последней страницы (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"В ответе указана последняя страница\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.last).to.eql(true);",
							"    pm.expect(jsonData.content.length).to.be.at.most(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees?page=3&size=2&sortBy=name&sortDir=asc",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					],
					"query": [
						{
							"key": "page",
							"value": "3"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "sortBy",
							"value": "name"
						},
						{
							"key": "sortDir",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка отсутствия данных (пустая страница)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ не содержит данных для страницы, на которой отсутствует привязка\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.content.length).to.eql(0);",
							"    pm.expect(jsonData.empty).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees?page=5&size=2&sortBy=name&sortDir=asc",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					],
					"query": [
						{
							"key": "page",
							"value": "5"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "sortBy",
							"value": "name"
						},
						{
							"key": "sortDir",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение сотрудника по ID (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ содержит правильные данные сотрудника\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\", 1);",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"role\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение сотрудника по ID (негативный тест: несуществующий ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 404 Not Found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Сообщение об ошибке содержит 'Не удалось найти сотрудника с переданным id: 999'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Не удалось найти сотрудника с переданным id: 999\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление сотрудника (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ содержит обновленные данные\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Billy\");",
							"    pm.expect(jsonData.role).to.eql(\"Manager\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Billy\",\n    \"role\": \"Manager\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление сотрудника (негативный тест: несуществующий ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 404 Not Found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Сообщение об ошибке содержит 'Не удалось найти сотрудника с переданным id: 999'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Не удалось найти сотрудника с переданным id: 999\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jane\",\n    \"role\": \"Manager\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление сотрудника (позитивный тест)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Сообщение об успешном удалении\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Сотрудник успешно удален\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление сотрудника (негативный тест: несуществующий ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа: 404 Not Found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Сообщение об ошибке содержит 'Не удалось найти сотрудника с переданным id: 999'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Не удалось найти сотрудника с переданным id: 999\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "999"
						}
					]
				}
			},
			"response": []
		}
	]
}